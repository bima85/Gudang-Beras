import React, { useState, useEffect } from 'react';
import { Head } from '@inertiajs/react';
import DashboardLayout from '@/Layouts/DashboardLayout';
import ProductForm from './components/ProductForm';
import CartTable from './components/CartTable';
import PaymentSection from './components/PaymentSection';

export default function Index({ auth, customers, products }) {
    const [selectedCustomer, setSelectedCustomer] = useState('');
    const [selectedProduct, setSelectedProduct] = useState('');
    const [quantity, setQuantity] = useState(1);
    const [cart, setCart] = useState([]);
    const [total, setTotal] = useState(0);
    const [payment, setPayment] = useState(0);
    const [change, setChange] = useState(0);

    useEffect(() => {
        calculateTotal();
    }, [cart]);

    const calculateTotal = () => {
        const sum = cart.reduce(
            (acc, item) => acc + item.price * item.quantity,
            0
        );
        setTotal(sum);
        calculateChange(payment, sum);
    };

    const calculateChange = (paymentAmount, totalAmount) => {
        setChange(paymentAmount - totalAmount);
    };

    const addToCart = () => {
        if (!selectedCustomer) {
            alert('Please select a customer first');
            return;
        }
        
        const product = products.find((p) => p.id === selectedProduct);
        if (!product) {
            alert('Please select a product');
            return;
        }
        
        if (quantity < 1) {
            alert('Please enter a valid quantity');
            return;
        }

        const existingItem = cart.find((item) => item.id === product.id);
        if (existingItem) {
            setCart(
                cart.map((item) =>
                    item.id === product.id
                        ? {
                              ...item,
                              quantity: item.quantity + parseInt(quantity),
                          }
                        : item
                )
            );
        } else {
            setCart([
                ...cart,
                {
                    id: product.id,
                    name: product.name,
                    price: product.price,
                    quantity: parseInt(quantity),
                },
            ]);
        }
        setQuantity(1);
    };

    const removeFromCart = (productId) => {
        setCart(cart.filter((item) => item.id !== productId));
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        // Add your transaction submission logic here
    };

    return (
        <DashboardLayout auth={auth}>
            <Head title="Transactions" />

            <div className="py-12">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                        <div className="p-6 bg-white border-b border-gray-200">
                            <div className="max-w-3xl mx-auto">
                                {/* Header Section */}
                                <div className="mb-8">
                                    <h1 className="text-3xl font-bold text-gray-900 mb-2">Transaction</h1>
                                    <p className="text-gray-600">Create new transaction for customer purchase</p>
                                    <div className="h-1 w-full bg-blue-500 mt-4"></div>
                                </div>
                                
                                <div className="space-y-8">
                                    <ProductForm
                                        selectedCustomer={selectedCustomer}
                                        setSelectedCustomer={setSelectedCustomer}
                                        selectedProduct={selectedProduct}
                                        setSelectedProduct={setSelectedProduct}
                                        quantity={quantity}
                                        setQuantity={setQuantity}
                                        addToCart={addToCart}
                                        customers={customers}
                                        products={products}
                                    />

                                    <CartTable
                                        cart={cart}
                                        removeFromCart={removeFromCart}
                                    />

                                    <PaymentSection
                                        total={total}
                                        payment={payment}
                                        change={change}
                                        setPayment={setPayment}
                                        calculateChange={calculateChange}
                                        handleSubmit={handleSubmit}
                                        cart={cart}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DashboardLayout>
    );
}
