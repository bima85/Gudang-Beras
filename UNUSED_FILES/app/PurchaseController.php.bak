<?php

namespace App\Http\Controllers\Apps;

use App\Models\Unit;
use App\Models\Stock;
use App\Models\Product;
use App\Models\Category;
use App\Models\Purchase;
use App\Models\Supplier;
use App\Models\Warehouse;
use App\Models\Subcategory;
use Illuminate\Http\Request;
use Inertia\Inertia;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use App\Helpers\UnitConversionHelper;

class PurchaseController extends Controller
{
    public function destroy($id)
    {
        $purchase = Purchase::findOrFail($id);
        // Hapus semua item terkait terlebih dahulu
        $purchase->items()->delete();
        $purchase->delete();

        return redirect()->route('purchases.index')->with('success', 'Pembelian berhasil dihapus');
    }
    public function index()
    {
        $purchases = Purchase::with([
            'supplier',
            'warehouse',
            'items.product',
            'items.unit',
            'items.category',
            'items.subcategory'
        ])->latest()->get();

        return Inertia::render('Dashboard/Purchases/Index', [
            'purchases' => $purchases
        ]);
    }

    public function create()
    {
        return inertia('Dashboard/Purchases/Create', [
            'suppliers' => Supplier::all(['id', 'name']),
            'warehouses' => Warehouse::all(['id', 'name']),
            'products' => Product::all(['id', 'name']),
            'units' => Unit::all(['id', 'name', 'conversion_to_kg']),
            'categories' => Category::all(['id', 'name']),
            'subcategories' => Subcategory::all(['id', 'name', 'category_id']),
        ]);
    }

    public function edit($id)
    {
        $purchase = Purchase::with([
            'supplier',
            'warehouse',
            'items.product',
            'items.unit',
            'items.category',
            'items.subcategory'
        ])->findOrFail($id);
        return Inertia::render('Dashboard/Purchases/Edit', [
            'purchase' => $purchase,
            'suppliers' => Supplier::all(['id', 'name']),
            'warehouses' => Warehouse::all(['id', 'name']),
            'products' => Product::all(['id', 'name']),
            'units' => Unit::all(['id', 'name', 'conversion_to_kg']),
            'categories' => Category::all(['id', 'name']),
            'subcategories' => Subcategory::all(['id', 'name', 'category_id']),
        ]);
    }

    public function show($id)
    {
        $purchase = Purchase::with([
            'supplier',
            'warehouse',
            'items.product',
            'items.unit',
            'items.category',
            'items.subcategory'
        ])->findOrFail($id);
        return Inertia::render('Dashboard/Purchases/Show', [
            'purchase' => $purchase
        ]);
    }

    public function store(Request $request)
    {
        // dd($request->all());
        // Debug: log payload request
        Log::info('Payload pembelian diterima:', $request->all());
        try {
            $validated = $request->validate([
                'supplier_name' => 'required|string|max:255',
                'warehouse_id' => 'required|exists:warehouses,id',
                'purchase_date' => 'required|date',
                'phone' => 'nullable|string|max:50',
                'address' => 'nullable|string|max:255',
                'items' => 'required|array|min:1',
                'items.*.product_id' => 'required|exists:products,id',
                'items.*.unit_id' => 'required|exists:units,id',
                'items.*.category_id' => 'required|exists:categories,id',
                'items.*.subcategory_id' => 'nullable|exists:subcategories,id',
                'items.*.qty' => 'required|numeric|min:1',
                'items.*.harga_pembelian' => 'required|numeric|min:0',
            ]);
        } catch (\Illuminate\Validation\ValidationException $e) {
            Log::error('Validasi gagal:', ['errors' => $e->errors(), 'payload' => $request->all()]);
            throw $e;
        }

        return DB::transaction(function () use ($validated) {
            // Cari supplier berdasarkan nama
            $supplier = Supplier::where('name', $validated['supplier_name'])->first();
            if (!$supplier) {
                $supplier = Supplier::create([
                    'name' => $validated['supplier_name'],
                    'phone' => $validated['phone'] ?? null,
                    'address' => $validated['address'] ?? null,
                ]);
            } else {
                // Update phone dan address jika ada perubahan
                $update = false;
                if (
                    (isset($validated['phone']) && $validated['phone'] && $supplier->phone !== $validated['phone']) ||
                    (isset($validated['address']) && $validated['address'] && $supplier->address !== $validated['address'])
                ) {
                    $supplier->phone = $validated['phone'] ?? $supplier->phone;
                    $supplier->address = $validated['address'] ?? $supplier->address;
                    $supplier->save();
                }
            }

            $supplier_id = $supplier->id;

            // Hitung subtotal dengan conversion_to_kg
            $totalPembelian = 0;
            $itemSubtotals = [];
            foreach ($validated['items'] as $item) {
                $unit = Unit::find($item['unit_id']);
                $conversion = $unit ? $unit->conversion_to_kg : 1;
                $subtotal = $conversion * $item['qty'] * $item['harga_pembelian'];
                $itemSubtotals[] = [
                    'item' => $item,
                    'subtotal' => $subtotal,
                    'conversion' => $conversion,
                ];
                $totalPembelian += $subtotal;
            }

            $purchase = Purchase::create([
                'supplier_id' => $supplier_id,
                'warehouse_id' => $validated['warehouse_id'],
                'purchase_date' => $validated['purchase_date'],
                'total_pembelian' => $totalPembelian,
                'user_id' => Auth::id(),
            ]);

            foreach ($itemSubtotals as $itemData) {
                $item = $itemData['item'];
                $subtotal = $itemData['subtotal'];

                $purchase->items()->create([
                    'product_id' => $item['product_id'],
                    'unit_id' => $item['unit_id'],
                    'category_id' => $item['category_id'],
                    'subcategory_id' => $item['subcategory_id'] ?? null,
                    'qty' => $item['qty'],
                    'harga_pembelian' => $item['harga_pembelian'],
                    'subtotal' => $subtotal,
                ]);

                // Konversi stok
                $unit = Unit::find($item['unit_id']);
                $qty_kg = UnitConversionHelper::toKg($item['qty'], $unit ? $unit->conversion_to_kg : 1);
                $konversi = UnitConversionHelper::fromKg($qty_kg);

                $this->updateStock($item['product_id'], $validated['warehouse_id'], $validated['purchase_date'], $konversi);
            }

            return redirect()->route('purchases.index')->with('success', 'Pembelian berhasil disimpan');
        });
    }

    private function updateStock($productId, $warehouseId, $purchaseDate, $konversi)
    {
        foreach (['ton' => 3, 'sak' => 2, 'kg' => 1] as $key => $unitId) {
            $stock = Stock::firstOrCreate([
                'product_id' => $productId,
                'warehouse_id' => $warehouseId,
                'unit_id' => $unitId,
                'purchase_date' => $purchaseDate,
                'user_id' => Auth::id(),
            ]);
            $stock->qty = (isset($stock->qty) ? $stock->qty : 0) + $konversi[$key];
            $stock->purchase_date = $purchaseDate;
            $stock->user_id = Auth::id();
            $stock->save();
        }
    }
}
