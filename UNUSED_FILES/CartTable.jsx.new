import React from "react";
import { IconTrash } from "@tabler/icons-react";
import Button from "@/Components/Dashboard/Button";
import InputSelect from "@/Components/Dashboard/InputSelect";
import Table, {
    Thead,
    Tbody,
    Tfoot,
    Tr,
    Th,
    Td,
} from "@/Components/Dashboard/Table";
import { toast } from "react-toastify";
import axios from "axios";

export default function CartTable({
    cartsToShow,
    units,
    setCartsState,
    setCartsTotalState,
    formatPrice,
}) {
    return (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-4 sm:p-6">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                Keranjang Belanja
            </h2>
            <div className="overflow-x-auto">
                <Table className="w-full min-w-[600px] text-sm">
                    <Thead className="bg-gray-100 dark:bg-gray-700">
                        <Tr>
                            <Th className="text-left py-3 px-4">No</Th>
                            <Th className="text-left py-3 px-4">Produk</Th>
                            <Th className="text-left py-3 px-4 hidden md:table-cell">Kategori</Th>
                            <Th className="text-left py-3 px-4 hidden md:table-cell">Subkategori</Th>
                            <Th className="text-right py-3 px-4">Qty</Th>
                            <Th className="text-left py-3 px-4">Satuan</Th>
                            <Th className="text-right py-3 px-4">Harga</Th>
                            <Th className="text-right py-3 px-4">Subtotal</Th>
                            <Th className="text-center py-3 px-4">Aksi</Th>
                        </Tr>
                    </Thead>
                    <Tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {cartsToShow.map((item, index) => {
                            const harga_satuan = item.price || 0;
                            const konversi = item.unit?.conversion_to_kg
                                ? parseFloat(item.unit.conversion_to_kg)
                                : 1;
                            const subtotal = (item.qty || 0) * konversi * harga_satuan;
                            return (
                                <Tr key={item.id || index} className="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                                    <Td className="py-3 px-4">{index + 1}</Td>
                                    <Td className="py-3 px-4 max-w-[120px] sm:max-w-[150px] truncate">
                                        {item.product?.name || "-"}
                                    </Td>
                                    <Td className="py-3 px-4 hidden md:table-cell">
                                        {item.category?.name || "-"}
                                    </Td>
                                    <Td className="py-3 px-4 hidden md:table-cell">
                                        {item.subcategory?.name || "-"}
                                    </Td>
                                    <Td className="py-3 px-4 text-right">{item.qty || 0}</Td>
                                    <Td className="py-3 px-4">
                                        <InputSelect
                                            data={item.units || units}
                                            selected={item.unit || null}
                                            setSelected={(selectedUnit) => {
                                                setCartsState((prevCarts) =>
                                                    prevCarts.map((cart) =>
                                                        cart.id === item.id
                                                            ? { ...cart, unit: selectedUnit }
                                                            : cart
                                                    )
                                                );
                                                axios
                                                    .post(route("transactions.updateCartUnit", item.id), {
                                                        unit_id: selectedUnit.id,
                                                    })
                                                    .then((res) => {
                                                        if (res.data?.carts || res.data?.carts_total) {
                                                            setCartsState(res.data.carts || []);
                                                            setCartsTotalState(res.data.carts_total || 0);
                                                        }
                                                        toast.success("Satuan berhasil diupdate");
                                                    })
                                                    .catch(() => {
                                                        toast.error("Gagal mengupdate satuan");
                                                    });
                                            }}
                                            displayKey="name"
                                            className="text-xs w-24 border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 rounded-md focus:ring-teal-500 dark:focus:ring-teal-400"
                                        />
                                    </Td>
                                    <Td className="py-3 px-4 text-right">
                                        <input
                                            type="number"
                                            min={0}
                                            value={harga_satuan}
                                            className="w-16 sm:w-20 text-right bg-gray-50 dark:bg-gray-700 rounded-md p-1 text-xs sm:text-sm border-gray-300 dark:border-gray-600 focus:ring-teal-500 dark:focus:ring-teal-400"
                                            onChange={(e) => {
                                                const newPrice = parseFloat(e.target.value) || 0;
                                                setCartsState((prevCarts) =>
                                                    prevCarts.map((cart) =>
                                                        cart.id === item.id
                                                            ? { ...cart, price: newPrice }
                                                            : cart
                                                    )
                                                );
                                                axios
                                                    .post(route("transactions.updateCartPrice", item.id), {
                                                        price: newPrice,
                                                    })
                                                    .then((res) => {
                                                        if (res.data?.carts || res.data?.carts_total) {
                                                            setCartsState(res.data.carts || []);
                                                            setCartsTotalState(res.data.carts_total || 0);
                                                        }
                                                        toast.success("Harga berhasil diupdate");
                                                    })
                                                    .catch(() => {
                                                        toast.error("Gagal mengupdate harga");
                                                    });
                                            }}
                                        />
                                    </Td>
                                    <Td className="py-3 px-4 text-right font-medium">
                                        {formatPrice(subtotal)}
                                    </Td>
                                    <Td className="py-3 px-4 text-center">
                                        <Button
                                            type="button"
                                            icon={<IconTrash size={16} />}
                                            className="p-1 bg-red-500 hover:bg-red-600 transition-colors duration-200"
                                            onClick={() => {
                                                axios
                                                    .delete(route("transactions.destroyCart", item.id))
                                                    .then((response) => {
                                                        if (response.data?.carts || response.data?.carts_total) {
                                                            setCartsState(response.data.carts || []);
                                                            setCartsTotalState(response.data.carts_total || 0);
                                                        } else {
                                                            setCartsState((prev) =>
                                                                prev.filter((c) => c.id !== item.id)
                                                            );
                                                            setCartsTotalState((prev) => prev - subtotal);
                                                        }
                                                        toast.success("Item berhasil dihapus");
                                                    })
                                                    .catch(() => {
                                                        toast.error("Gagal menghapus item");
                                                    });
                                            }}
                                        />
                                    </Td>
                                </Tr>
                            );
                        })}
                    </Tbody>
                    <Tfoot className="bg-gray-100 dark:bg-gray-700">
                        <Tr>
                            <Td colSpan={7} className="text-right font-semibold py-3 px-4">
                                Total
                            </Td>
                            <Td colSpan={2} className="text-right font-bold text-teal-600 dark:text-teal-400 py-3 px-4">
                                {formatPrice(
                                    cartsToShow.reduce((sum, item) => {
                                        const harga_satuan = item.price || 0;
                                        const konversi = item.unit?.conversion_to_kg
                                            ? parseFloat(item.unit.conversion_to_kg)
                                            : 1;
                                        return sum + (item.qty || 0) * konversi * harga_satuan;
                                    }, 0)
                                )}
                            </Td>
                        </Tr>
                    </Tfoot>
                </Table>
            </div>
        </div>
    );
}
